name: Build Multiplatform Application

on:
  push:
    tags:
      - 'v*'

jobs:
  build-desktop:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make Gradle wrapper executable (Linux and macOS only)
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      - name: Build for ${{ matrix.os }}
        run: ./gradlew packageReleaseDistributionForCurrentOS

      - name: Find build artifact
        id: find_artifact
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "ARTIFACT_PATH=$(find ./composeApp/build/compose/binaries/main-release/deb -name '*.deb' -print -quit)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "ARTIFACT_PATH=$(find ./composeApp/build/compose/binaries/main-release/dmg -name '*.dmg' -print -quit)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            EXE_PATH=$(find ./composeApp/build/compose/binaries/main-release/exe -name '*.exe' -print -quit)
            MSI_PATH=$(find ./composeApp/build/compose/binaries/main-release/msi -name '*.msi' -print -quit)
            echo "EXE_PATH=${EXE_PATH}" >> $GITHUB_ENV
            echo "MSI_PATH=${MSI_PATH}" >> $GITHUB_ENV
          fi

      - name: Upload platform-specific artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}-${{ github.ref_name }}
          # Upload different artifacts based on OS
          path: |
            ${{ matrix.os == 'windows-latest' && env.EXE_PATH || env.ARTIFACT_PATH }}
            ${{ matrix.os == 'windows-latest' && env.MSI_PATH || '' }}

  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build APK
        run: ./gradlew assembleDebug

      - name: Find Android APK
        id: find_apk
        run: echo "APK_PATH=$(find ./composeApp/build/outputs/apk/debug -name '*.apk' -print -quit)" >> $GITHUB_ENV

      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk-${{ github.ref_name }}
          path: ${{ env.APK_PATH }}

  build-wasm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build WebAssembly
        run: ./gradlew wasmJsBrowserDistribution

      - name: Upload WebAssembly files
        uses: actions/upload-artifact@v3
        with:
          name: wasm-web-files-${{ github.ref_name }}
          path: composeApp/build/dist/wasmJs/productionExecutable/*

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: composeApp/build/dist/wasmJs/productionExecutable/

  create-release:
    runs-on: ubuntu-latest
    needs: [build-desktop, build-android, build-wasm]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            This release includes builds for all supported platforms:
            - Desktop (Windows, macOS, Linux)
            - Android
            - WebAssembly
          draft: false
          prerelease: false

      - name: Zip WebAssembly files
        run: |
          cd artifacts/wasm-web-files-${{ github.ref_name }}
          zip -r ../../wasm-dist-${{ github.ref_name }}.zip .

      - name: Find APK path
        run: |
          echo "APK_PATH=$(find ./artifacts/android-apk-${{ github.ref_name }} -name "*.apk" -type f | head -n 1)" >> $GITHUB_ENV

      - name: Find DEB path
        run: |
          echo "DEB_PATH=$(find ./artifacts/build-ubuntu-latest-${{ github.ref_name }} -name "*.deb" -type f | head -n 1)" >> $GITHUB_ENV

      - name: Find DMG path
        run: |
          echo "DMG_PATH=$(find ./artifacts/build-macos-latest-${{ github.ref_name }} -name "*.dmg" -type f | head -n 1)" >> $GITHUB_ENV

      - name: Find EXE path
        run: |
          echo "EXE_PATH=$(find ./artifacts/build-windows-latest-${{ github.ref_name }} -name "*.exe" -type f | head -n 1)" >> $GITHUB_ENV

      - name: Find MSI path
        run: |
          echo "MSI_PATH=$(find ./artifacts/build-windows-latest-${{ github.ref_name }} -name "*.msi" -type f | head -n 1)" >> $GITHUB_ENV

      - name: Upload Android APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.APK_PATH }}
          asset_name: app-debug-${{ github.ref_name }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DEB_PATH }}
          asset_name: app-${{ github.ref_name }}.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DMG_PATH }}
          asset_name: app-${{ github.ref_name }}.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXE_PATH }}
          asset_name: app-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.MSI_PATH }}
          asset_name: app-${{ github.ref_name }}.msi
          asset_content_type: application/x-msi

      - name: Upload WebAssembly ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wasm-dist-${{ github.ref_name }}.zip
          asset_name: wasm-dist-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  deploy-github-pages:
    runs-on: ubuntu-latest
    needs: build-wasm
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
